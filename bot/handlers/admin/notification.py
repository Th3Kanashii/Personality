from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from cachetools import LRUCache
from datetime import datetime

from bot.database import DataAccessObject
from bot.keyboards import cancel_notification, cancel_scheduler
from bot.misc import States, send_notification, get_album

router = Router()
cache = LRUCache(maxsize=5)


@router.message(Command(commands=["notification"]))
async def command_notification(message: types.Message,
                               state: FSMContext) -> None:
    await message.answer(text="–í–∫–∞–∂—ñ—Ç—å —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ hh.mm",
                         reply_markup=cancel_notification())
    await state.set_state(States.notification_time)


@router.message(States.notification_time)
async def time_notification(message: types.Message,
                            state: FSMContext) -> None:
    if message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå":
        await message.answer(text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚è≠Ô∏è":
        await message.answer(text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
                             reply_markup=cancel_notification(back=True))
        await state.update_data(time=0)
        await state.set_state(States.notification)
    else:
        try:
            hours, minutes = map(int, message.text.split("."))
            interval_seconds = (hours * 3600) + (minutes * 60)
            await message.answer(text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
                                 reply_markup=cancel_notification(back=True))
            await state.update_data(time=interval_seconds)
            await state.set_state(States.notification)
        except ValueError:
            await message.answer(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ —á–∞—Å",
                                 reply_markup=cancel_notification())


@router.message(States.notification)
async def notification(message: types.Message,
                       bot: Bot,
                       state: FSMContext,
                       dao: DataAccessObject,
                       album: list[types.Message] = None) -> None:
    media = None
    data = await state.get_data()
    users = await dao.get_all_users()
    time = data["time"]

    if message.media_group_id:
        media = await get_album(album)

    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await message.answer(text="–í–∫–∞–∂—ñ—Ç—å —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ hh.mm",
                             reply_markup=cancel_notification())
        await state.set_state(States.notification_time)
    elif message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå":
        await message.answer(text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    elif time == 0:
        await send_notification(message=message,
                                bot=bot,
                                data=users,
                                media=media)
        await message.answer(text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    else:
        current_time = datetime.now().time()
        current_hour, current_minute = current_time.hour, current_time.minute
        time_difference_seconds = time - (current_hour * 60 + current_minute) * 60

        scheduler = AsyncIOScheduler()

        job_id = f"{message.date.timestamp()}_{message.from_user.id}"

        scheduler.add_job(func=send_notification,
                          args=(message, bot, users, scheduler, media),
                          trigger='interval',
                          seconds=time_difference_seconds,
                          id=job_id)

        scheduler.start()
        cache[job_id] = scheduler

        await message.answer(text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ",
                             reply_markup=types.ReplyKeyboardRemove())
        await message.answer(text=f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {time_difference_seconds // 60} —Ö–≤–∏–ª–∏–Ω(—É)\n"
                                  f"id: {message.date.timestamp()}_{message.from_user.id}",
                             reply_markup=cancel_scheduler())

        await state.clear()


@router.callback_query(F.data == "cancel")
async def _cancel_scheduler(callback: types.CallbackQuery):
    job_id = callback.message.text.split("id: ")[-1]
    scheduler = cache.get(job_id)
    scheduler.remove_job(job_id)
    del cache[job_id]
    await callback.message.edit_text(text="–°–∫–∞—Å–æ–≤–∞–Ω–æ")
