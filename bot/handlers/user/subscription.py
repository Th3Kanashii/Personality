from aiogram import types, Router, Bot, F

from bot.database import RequestsRepo
from bot.keyboards import cancel_subscription, url_subscription, start

router = Router()


@router.message(F.text.in_(["–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞ üìö", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ üßò", "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞ üèõ",
                            "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚öñÔ∏è", "–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞ ‚úÖ", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ‚úÖ",
                            "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞ ‚úÖ", "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚úÖ"]))
async def subscription(message: types.Message,
                       repo: RequestsRepo) -> None:
    """
    Handler user subscription to specific categories.

    :param message: The message from Telegram.
    :param repo: The repository for database requests.
    """
    category_mapping = {
        "–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞": "–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞:  –©–æ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–º \"–º–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞\"? –©–æ –æ–∑–Ω–∞—á–∞—î "
                              "\"–º–æ–ª–æ–¥—ñ–∂–Ω–∞ —Ä–æ–±–æ—Ç–∞\" —É —Å—É—á–∞—Å–Ω–æ–º—É —Å–≤—ñ—Ç—ñ? –•—Ç–æ –º–æ–∂–µ —Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é —Ü—ñ—î—ó –∑–∞—Ö–æ–ø–ª—é—é—á–æ—ó —Å—Ñ–µ—Ä–∏? "
                              "–Ø–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ –≤—ñ–¥–æ–º–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–æ–ª–æ–¥—ñ–∂–Ω–æ–º—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É? –Ø–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π "
                              "–≤–ª–∞—Å–Ω–∏–π —à–ª—è—Ö —É —Ü—ñ–π —Å—Ñ–µ—Ä—ñ?",
        "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–Ø–∫ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –Ω–æ–≤–∏—Ö —É–º–æ–≤ —É –ø–µ—Ä—ñ–æ–¥ –≤—ñ–π–Ω–∏, —è–∫ —Å–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑ "
                               "–∫—Ä–∏–∑–æ–≤–∏–º–∏ —Ç–∞ —Ç—Ä–∞–≤–º–∞—Ç–∏—á–Ω–∏–º–∏ —Å–∏—Ç—É–∞—Ü—ñ—è–º–∏, —â–æ —Ä–æ–±–∏—Ç–∏ –∑ –µ–º–æ—Ü—ñ–π–Ω–∏–º–∏ –≥–æ–π–¥–∞–ª–∫–∞–º–∏, "
                               "—Ö—Ä–æ–Ω—ñ—á–Ω–æ—é –≤—Ç–æ–º–æ—é, —Å—Ç—Ä–µ—Å–æ–º, –≤–∏–≥–æ—Ä—è–Ω–Ω—è–º, —è–∫ –≤–ø–æ—Ä–∞—Ç–∏—Å—è –∑ –≤—Ç—Ä–∞—Ç–æ—é —Ç–∞ –ø–æ–¥–æ–ª–∞—Ç–∏ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å "
                               "—ñ —Å—Ç—Ä–∞—Ö, —â–æ —Ä–æ–±–∏—Ç–∏ –∫–æ–ª–∏ —Ç–µ–±–µ –Ω—ñ—Ö—Ç–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î? –Ø–∫ –∂–∏—Ç–∏ —É –≤–æ—î–Ω–Ω–æ–º—É —Ç–∞ –ø—ñ—Å–ª—è–≤–æ—î–Ω–Ω–æ–º—É "
                               "—Å—É—Å–ø—ñ–ª—å—Å—Ç–≤—ñ? –í—Å—ñ —Ü—ñ —Ç–∞ —Å–≤–æ—ó –∑–ø–∏—Ç–∞–Ω–Ω—è —Ç–∏ –º–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ –Ω–∞—à–æ–º—É —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É-–≤–æ–ª–æ–Ω—Ç–µ—Ä—É, "
                               "–Ω–µ —Ö–≤–∏–ª—é–π—Å—è, –∑–∞–ø–∏—Ç—É–π, —Ü–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ –≤—Å–µ üòä",
        "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Å–≤–æ—ó—Ö –ø—Ä–∞–≤ —ñ –æ–±–æ–≤'—è–∑–∫—ñ–≤ —è–∫ –≥—Ä–æ–º–∞–¥—è–Ω, –∞ —Ç–∞–∫–æ–∂ "
                               "–∞–∫—Ç–∏–≤–Ω–æ—ó —É—á–∞—Å—Ç—ñ —É —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤—ñ —Ç–∞ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ. –ú–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–±–µ –¥–æ "
                               "–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —É—á–∞—Å—Ç—ñ –≤ –≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–æ–º—É –∂–∏—Ç—Ç—ñ, —Ä–æ–∑–≤–∏–Ω–µ–º–æ –≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫—É —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å, "
                               "—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å, –Ω–∞–≤—á–∏–º–æ  –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è, –∑–Ω–∞–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö —Ç–∞ –ª—é–¥—Å—å–∫–∏—Ö.",
        "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–ù–∞–¥–∞–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –∑ –ø–∏—Ç–∞–Ω—å –≤–∑–∞—î–º–æ–≤—ñ–¥–Ω–æ—Å–∏–Ω –∑ –¥–µ—Ä–∂–∞–≤–Ω–∏–º–∏ "
                              "–æ—Ä–≥–∞–Ω–∞–º–∏ —Ç–∞ –æ—Ä–≥–∞–Ω–∞–º–∏ –º—ñ—Å—Ü–µ–≤–æ–≥–æ —Å–∞–º–æ–≤—Ä—è–¥—É–≤–∞–Ω–Ω—è;\n\n–î–æ–ø–æ–º–æ–≥–∞ –≤ –¥–æ–≥–æ–≤—ñ—Ä–Ω—ñ–π "
                              "—Ä–æ–±–æ—Ç—ñ;\n\n–ù–∞–¥–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –∑ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å.\n\n–ê —Ç–∞–∫–æ–∂ –º–∞—î—à –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "
                              "–∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–º—É —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É-–≤–æ–ª–æ–Ω—Ç–µ—Ä—É.\n\n–ù–µ —Ö–≤–∏–ª—é–π—Å—è, –∑–∞–ø–∏—Ç—É–π üòä",
    }
    category = category_mapping.get(" ".join(message.text.split()[:-1]))
    await message.answer(text=category,
                         reply_markup=cancel_subscription())
    await repo.users.update_user_subscription(category=message.text,
                                              user_id=message.from_user.id)


@router.message(F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚ùå")
async def unsubscribe(message: types.Message,
                      repo: RequestsRepo) -> None:
    """
    Handler user cancellation of subscriptions.

    :param message: The message from Telegram.
    :param repo: The repository for database requests.
    """
    await repo.users.update_user_subscription(user_id=message.from_user.id,
                                              cancel=True)
    subscriptions = await repo.users.get_user_subscriptions(user_id=message.from_user.id)
    await message.answer(text="–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                         reply_markup=start(subscriptions))


@router.message(F.text == "–ñ–∏–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ üìñ")
async def living_library_link(message: types.Message,
                              bot: Bot) -> None:
    """
    Handler to provide a link to the live library chat.

    :param message: The message from Telegram.
    :param bot: The bot object used to interact with the Telegram API.
    """
    member = await bot.get_chat_member(chat_id="@living_library",
                                       user_id=message.from_user.id)
    await message.answer(text="–ñ–∏–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ - —Ü–µ –º—ñ—Å—Ü–µ, –¥–µ –∫–Ω–∏–≥–∏ –æ–∂–∏–≤–∞—é—Ç—å –∑–∞–≤–¥—è–∫–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—é —ñ –¥—ñ–∞–ª–æ–∑—ñ. –¶–µ –º—ñ—Å—Ü–µ, "
                              "–¥–µ –ª—é–¥–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –∫—É—Ç–∫—ñ–≤ –∂–∏—Ç—Ç—è –∑–±–∏—Ä–∞—é—Ç—å—Å—è, —â–æ–± –≥–ª–∏–±—à–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∏—Ö "
                              "—Ç–≤–æ—Ä–∞—Ö. –ö–æ–∂–Ω–∞ –∫–Ω–∏–≥–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∂–∏–≤—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ, —Å—Ç–∞—î –≤–∏—Ä–∞–∑–Ω–∏–∫–æ–º –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö —ñ–¥–µ–π, "
                              "—Ç–µ–º —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤. –û–±–≥–æ–≤–æ—Ä—é–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤, –¥—ñ–ª—ñ—Ç—å—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏, –¥–æ–Ω–æ—Å—å—Ç–µ –ø–æ—Å–ª–∞–Ω–Ω—è –∫–Ω–∏–≥, "
                              "–∞ —Ç–∞–∫–æ–∂ –≤–ª–∞—Å–Ω–∏–º–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è–º–∏. –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å!",
                         reply_markup=url_subscription(member=member))


@router.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üìå")
async def main_menu(message: types.Message,
                    repo: RequestsRepo) -> None:
    """
    Handler a return to the main menu.

    :param message: The message from Telegram.
    :param repo: The repository for database requests.
    """
    await repo.users.update_user_subscription(user_id=message.from_user.id,
                                              main_menu=True)
    subscriptions = await repo.users.get_user_subscriptions(user_id=message.from_user.id)
    await message.answer(text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                         reply_markup=start(subscriptions))
