from aiogram import types, Router, Bot, F

from bot.database import DataAccessObject
from bot.keyboards.reply import cancel_subscription, start
from bot.keyboards.inline import url_subscription

router = Router()


@router.message(F.text.in_(["–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞ üìö", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ üßò", "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞ üèõ",
                            "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚öñÔ∏è", "–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞ ‚úÖ", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ‚úÖ",
                            "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞ ‚úÖ", "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚úÖ"]))
async def subscription(message: types.Message,
                       dao: DataAccessObject) -> None:
    """
    Handler user subscription to specific categories.

    :param message: The message from Telegram.
    :param dao: The DataAccessObject for database access.
    """
    category_mapping = {
        "–ú–æ–ª–æ–¥—ñ–∂–Ω–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–©–æ —Ç–∞–∫–µ –ø–æ–ª—ñ—Ç–∏–∫–∞. –Ø–∫ –∂–∏–≤—É—Ç—å –ø–æ–ª—ñ—Ç–∏–∫–∏, —è–∫–∞ —ó—Ö–Ω—è —Ä–æ–ª—å —É —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤—ñ. –Ø–∫ "
                              "—Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –∑ –º–æ–ª–æ–¥—ñ–∂–Ω–æ–≥–æ –∫—Ä–∏–ª–∞. –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏, —è–∫ –¥—ñ—è—Ç–∏, —è–∫—ñ —Å–∫–ª–∞–¥–Ω–æ—â—ñ "
                              "—á–µ–∫–∞—é—Ç—å –Ω–∞ —Ü—å–æ–º—É —à–ª—è—Ö—É.\n\n–ê —Ç–∞–∫–æ–∂ –º–∞—î—à –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–º—É "
                              "—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É-–≤–æ–ª–æ–Ω—Ç–µ—Ä—É.\n\n–ù–µ —Ö–≤–∏–ª—é–π—Å—è, –∑–∞–ø–∏—Ç—É–π üòä",
        "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–Ø–∫ —Å–µ–±–µ –≤–µ—Å—Ç–∏ –Ω–∞ –Ω–æ–≤–æ–º—É –º—ñ—Å—Ü—ñ, –ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è/–Ω–∞–≤—á–∞–Ω–Ω—è, —è–∫ –¥—ñ—è—Ç–∏ "
                               "–∫–æ–ª–∏ —Ç–∏ –∂–µ—Ä—Ç–≤–∞ –±—É–ª—ñ–Ω–≥—É, —â–æ —Ä–æ–±–∏—Ç–∏ –∫–æ–ª–∏ —Ç–µ–±–µ –Ω—ñ—Ö—Ç–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î, —è–∫ –∂–∏—Ç–∏ —É –≤–æ—î–Ω–Ω–æ–º—É —Ç–∞ "
                               "–ø—ñ—Å–ª—è–≤–æ—î–Ω–Ω–æ–º—É —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤—ñ?\n\n–ê —Ç–∞–∫–æ–∂ –º–∞—î—à –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–º—É "
                               "—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É-–≤–æ–ª–æ–Ω—Ç–µ—Ä—É.\n\n–ù–µ —Ö–≤–∏–ª—é–π—Å—è, –∑–∞–ø–∏—Ç—É–π, —Ü–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ –≤—Å–µ üòä",
        "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Å–≤–æ—ó—Ö –ø—Ä–∞–≤ —ñ –æ–±–æ–≤'—è–∑–∫—ñ–≤ —è–∫ –≥—Ä–æ–º–∞–¥—è–Ω, –∞ —Ç–∞–∫–æ–∂ "
                               "–∞–∫—Ç–∏–≤–Ω–æ—ó —É—á–∞—Å—Ç—ñ —É —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤—ñ —Ç–∞ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ. –ú–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–±–µ –¥–æ "
                               "–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —É—á–∞—Å—Ç—ñ –≤ –≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–æ–º—É –∂–∏—Ç—Ç—ñ, —Ä–æ–∑–≤–∏–Ω–µ–º–æ –≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫—É —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å, "
                               "—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å, –Ω–∞–≤—á–∏–º–æ  –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è, –∑–Ω–∞–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö —Ç–∞ –ª—é–¥—Å—å–∫–∏—Ö.",
        "–Æ—Ä–∏–¥–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞": "–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–ù–∞–¥–∞–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –∑ –ø–∏—Ç–∞–Ω—å –≤–∑–∞—î–º–æ–≤—ñ–¥–Ω–æ—Å–∏–Ω –∑ –¥–µ—Ä–∂–∞–≤–Ω–∏–º–∏ "
                              "–æ—Ä–≥–∞–Ω–∞–º–∏ —Ç–∞ –æ—Ä–≥–∞–Ω–∞–º–∏ –º—ñ—Å—Ü–µ–≤–æ–≥–æ —Å–∞–º–æ–≤—Ä—è–¥—É–≤–∞–Ω–Ω—è;\n\n–î–æ–ø–æ–º–æ–≥–∞ –≤ –¥–æ–≥–æ–≤—ñ—Ä–Ω—ñ–π "
                              "—Ä–æ–±–æ—Ç—ñ;\n\n–ù–∞–¥–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –∑ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å.\n\n–ê —Ç–∞–∫–æ–∂ –º–∞—î—à –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "
                              "–∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–º—É —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É-–≤–æ–ª–æ–Ω—Ç–µ—Ä—É.\n\n–ù–µ —Ö–≤–∏–ª—é–π—Å—è, –∑–∞–ø–∏—Ç—É–π üòä",
    }
    await message.answer(text=category_mapping.get(" ".join(message.text.split()[:-1])),
                         reply_markup=cancel_subscription())
    await dao.update_user_subscription(category=message.text,
                                       user_id=message.from_user.id)


@router.message(F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚ùå")
async def unsubscribe(message: types.Message,
                      dao: DataAccessObject) -> None:
    """
    Handler user cancellation of subscriptions.

    :param message: The message from Telegram.
    :param dao: The DataAccessObject for database access.
    """
    await dao.update_user_subscription(user_id=message.from_user.id,
                                       cancel=True)
    subscriptions = await dao.get_user_subscriptions(user_id=message.from_user.id)
    await message.answer(text="–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                         reply_markup=start(subscriptions))


@router.message(F.text == "–ñ–∏–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ üìñ")
async def living_library_link(message: types.Message,
                              bot: Bot) -> None:
    """
    Handler to provide a link to the live library chat.

    :param message: The message from Telegram.
    :param bot: The bot object used to interact with the Telegram API.
    """
    member = await bot.get_chat_member(chat_id="@living_library", user_id=message.from_user.id)
    await message.answer(text="–¢–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è:\n\n–ñ–∏–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ - —Ü–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —è–∫–∏–π –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –±–æ—Ä–æ—Ç–∏—Å—è –∑ "
                              "—É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏ —Ç–∞ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—î—é. –í—ñ–Ω –ø—Ä–∞—Ü—é—î —Ç–∞–∫ —Å–∞–º–æ, —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: "
                              "–≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–∞–∑–≤, –≤–∏–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É, —è–∫—É –≤–æ–Ω–∏ —Ö–æ—á—É—Ç—å "
                              "–ø—Ä–æ—á–∏—Ç–∞—Ç–∏, —ñ –≤–∑—è—Ç–∏ —ó—ó –Ω–∞ –æ–±–º–µ–∂–µ–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É. –ü—ñ—Å–ª—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—è –≤–æ–Ω–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –∫–Ω–∏–≥—É "
                              "–≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É —ñ, —è–∫—â–æ —Ö–æ—á—É—Ç—å, –±–µ—Ä—É—Ç—å —ñ–Ω—à—É. –†—ñ–∑–Ω–∏—Ü—è –ª–∏—à–µ –≤ —Ç–æ–º—É, —â–æ –≤ –ñ–∏–≤—ñ–π –ë—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ "
                              "–∫–Ω–∏–≥–∏ ‚Äì —Ü–µ –ª—é–¥–∏, –∞ —á–∏—Ç–∞–Ω–Ω—è ‚Äì —Ü–µ —Ä–æ–∑–º–æ–≤–∞.\n\n–°–ø—ñ–ª–∫—É–π—Å—è, —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–π, –¥–∞–≤–∞–π –ø–æ—Ä–∞–¥–∏ —â–æ "
                              "–ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ü—ñ–∫–∞–≤–µ —Ç–∞ –∑–∞—Ö–æ–ø–ª—é—é—á–µ!",
                         reply_markup=url_subscription(member=member))


@router.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üìå")
async def main_menu(message: types.Message,
                    dao: DataAccessObject) -> None:
    """
    Handler a return to the main menu.

    :param message: The message from Telegram.
    :param dao: The DataAccessObject for database access.
    """
    await dao.update_user_subscription(user_id=message.from_user.id,
                                       main_menu=True)
    subscriptions = await dao.get_user_subscriptions(user_id=message.from_user.id)
    await message.answer(text="–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                         reply_markup=start(subscriptions))
